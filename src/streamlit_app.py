# streamlit_app.py

import streamlit as st
import requests
import uuid

# --- Page Configuration ---
st.set_page_config(
    page_title="‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï",
    page_icon="üìö",
    layout="wide"
)

# --- API Endpoints ---
BASE_API_URL = "http://127.0.0.1:8000"
CHAT_URL = f"{BASE_API_URL}/chat"
MEMORY_URL = f"{BASE_API_URL}/memory"

# --- Session State Initialization ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "user_id" not in st.session_state:
    st.session_state.user_id = "student_" + str(uuid.uuid4())

# --- Sidebar to Display Long-Term Memory ---
def display_memory_sidebar():
    """Fetches and displays the user's long-term memory in the sidebar."""
    st.sidebar.title("üß† Long-Term Memory")
    st.sidebar.markdown(f"**User ID:** `{st.session_state.user_id}`")
    
    try:
        # Fetch memory from the API
        response = requests.get(f"{MEMORY_URL}/{st.session_state.user_id}", timeout=10)
        response.raise_for_status()
        memory_data = response.json().get("memory")

        if memory_data:
            st.sidebar.write("Current student profile:")
            st.sidebar.json(memory_data)
        else:
            st.sidebar.info("No memory has been stored for this user yet. Start the conversation to build a profile!")
    
    except requests.exceptions.RequestException as e:
        st.sidebar.error(f"Could not connect to the memory API.\n\nError: {e}")

# --- Main App ---
st.title("üìö ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï (Personalized Chatbot)")
st.markdown("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡•§ ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶® ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßç‡¶Æ‡ßÉ‡¶§‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")

# Call the function to display the sidebar on every app rerun
display_memory_sidebar()

# Display chat history
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- User Input and API Interaction ---
if prompt := st.chat_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."):
    # Add user message to UI and history
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display thinking indicator and call API
    with st.chat_message("assistant"):
        with st.spinner("‡¶ö‡¶ø‡¶®‡ßç‡¶§‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø..."):
            try:
                # Generate a new thread ID for each message
                thread_id = "chat_session_" + str(uuid.uuid4())
                payload = {"query": prompt, "user_id": st.session_state.user_id, "thread_id": thread_id}
                
                response = requests.post(CHAT_URL, json=payload, timeout=120)
                response.raise_for_status()
                
                bot_response = response.json().get("response", "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                st.markdown(bot_response)
                
                # Add bot response to history
                st.session_state.messages.append({"role": "assistant", "content": bot_response})
                
                # Force a rerun to update the sidebar with the latest memory
                st.rerun()

            except requests.exceptions.RequestException as e:
                error_message = f"API ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá FastAPI ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡¶ü‡¶ø ‡¶ö‡¶≤‡¶õ‡ßá‡•§\n\nError: {e}"
                st.error(error_message)